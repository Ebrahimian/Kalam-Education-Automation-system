/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.kalam.viewer;

import demo.Student;
import secsys.*;
import java.io.*;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.NotifyDescriptor.Confirmation;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.Children;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.kalam.viewer//viewer//EN",
autostore = false)
@TopComponent.Description(preferredID = "viewerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.kalam.viewer.viewerTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_viewerAction",
preferredID = "viewerTopComponent")
@Messages({
    "CTL_viewerAction=viewer",
    "CTL_viewerTopComponent=viewer Window",
    "HINT_viewerTopComponent=This is a viewer window"
})
public final class viewerTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static ExplorerManager em = new ExplorerManager();
    String term;
    String course;
    static String tmp, tmp1, tmp2;
    static String HString;
    
String nb=new Secsys().Secsys();




    public viewerTopComponent() {
       // if("G2STNP1".equals(nb)){
        initComponents();
        setName(Bundle.CTL_viewerTopComponent());
        setToolTipText(Bundle.HINT_viewerTopComponent());

        EntityManager entityManager = Persistence.createEntityManagerFactory("stLibraryPU").createEntityManager();
        javax.persistence.Query query = entityManager.createQuery("SELECT c FROM Student c");
        List<Student> resultList = query.getResultList();
        
        em.setRootContext(new stRootNode(Children.create(new StChildFactory(resultList), true)));
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));

 
      //  }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        beanTreeView1 = new org.openide.explorer.view.BeanTreeView();
        jLabel1 = new javax.swing.JLabel();
        termField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        CourseSpinner = new javax.swing.JSpinner();
        termButton = new javax.swing.JButton();
        courseButton = new javax.swing.JButton();
        termcourseButton = new javax.swing.JButton();
        listPrintButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(227, 227, 227));
        setDisplayName(org.openide.util.NbBundle.getMessage(viewerTopComponent.class, "viewerTopComponent.displayName")); // NOI18N
        setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        setPreferredSize(new java.awt.Dimension(100, 400));

        beanTreeView1.setBackground(new java.awt.Color(227, 227, 227));
        beanTreeView1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(viewerTopComponent.class, "viewerTopComponent.beanTreeView1.border.title"))); // NOI18N
        beanTreeView1.setForeground(new java.awt.Color(227, 227, 227));
        beanTreeView1.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(viewerTopComponent.class, "viewerTopComponent.jLabel1.text")); // NOI18N

        termField.setText(org.openide.util.NbBundle.getMessage(viewerTopComponent.class, "viewerTopComponent.termField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(viewerTopComponent.class, "viewerTopComponent.jLabel2.text")); // NOI18N

        CourseSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"Children 1", "Children 2", "Children 3", "Children 4", "Children 5", "Children 6", "Children 7", "Children 8", "Children 9", "Children 10", "Children 11", "Children 12", "Children 13", "Children 14", "Basic A", "Basic B", "Starter 1", "Starter 2", "JL 1", "JL 2", "JL 3", "JL 4", "JL 5", "JL 6", "JL 7", "JL 8", "JL 9", "JL 10", "JL 11", "JL 12", "Pre-Bridge 1", "Pre-Bridge 2", "Pre-Bridge 3", "Pre-Bridge 4", "Bridge 1", "Bridge 2", "Bridge 3", "Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10", "Level 11", "Level 12", "UPI 1", "UPI 2", "UPI 3", "UPI 4", "Pre-Advanced A", "Pre-Advanced B", "Pre-Advanced C", "Advanced A", "Advanced B", "Advanced C", "FCE 1", "FCE 2", "FCE 3", "FCE 4", " "}));

        org.openide.awt.Mnemonics.setLocalizedText(termButton, org.openide.util.NbBundle.getMessage(viewerTopComponent.class, "viewerTopComponent.termButton.text")); // NOI18N
        termButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(courseButton, org.openide.util.NbBundle.getMessage(viewerTopComponent.class, "viewerTopComponent.courseButton.text")); // NOI18N
        courseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(termcourseButton, org.openide.util.NbBundle.getMessage(viewerTopComponent.class, "viewerTopComponent.termcourseButton.text")); // NOI18N
        termcourseButton.setToolTipText(org.openide.util.NbBundle.getMessage(viewerTopComponent.class, "viewerTopComponent.termcourseButton.toolTipText")); // NOI18N
        termcourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termcourseButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(listPrintButton, org.openide.util.NbBundle.getMessage(viewerTopComponent.class, "viewerTopComponent.listPrintButton.text")); // NOI18N
        listPrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listPrintButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(beanTreeView1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(109, 109, 109)
                            .addComponent(listPrintButton))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(termcourseButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(courseButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(termButton, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(termField)
                                .addComponent(CourseSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)))))
                .addGap(0, 69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(termcourseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(termButton)
                        .addGap(29, 29, 29)
                        .addComponent(courseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(termField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(CourseSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel2)))
                .addGap(11, 11, 11)
                .addComponent(beanTreeView1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(listPrintButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void termButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termButtonActionPerformed
        HString="";
        term = termField.getText();
        viewerTopComponent.refreshNodeTerm(term);
    }//GEN-LAST:event_termButtonActionPerformed

    private void courseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseButtonActionPerformed
        HString="";
        course = CourseSpinner.getValue().toString();
        viewerTopComponent.refreshNodeCourse(course);

    }//GEN-LAST:event_courseButtonActionPerformed

    private void termcourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termcourseButtonActionPerformed
        HString="";
        term = termField.getText();
        course = CourseSpinner.getValue().toString();
        viewerTopComponent.refreshNode(course, term);

    }//GEN-LAST:event_termcourseButtonActionPerformed

    private void listPrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listPrintButtonActionPerformed
    
        HTMLGenerator(HString);
         String url = "E:/report/1.html";
      try {
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
       }
    }//GEN-LAST:event_listPrintButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner CourseSpinner;
    private org.openide.explorer.view.BeanTreeView beanTreeView1;
    private javax.swing.JButton courseButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton listPrintButton;
    private javax.swing.JButton termButton;
    private javax.swing.JTextField termField;
    private javax.swing.JButton termcourseButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public static void refreshNode() {
        EntityManager entityManager = Persistence.createEntityManagerFactory("stLibraryPU").createEntityManager();
        javax.persistence.Query query = entityManager.createQuery("SELECT c FROM Student c");
        List<Student> resultList = query.getResultList();
        em.setRootContext(new stRootNode(Children.create(new StChildFactory(resultList), true)));
        HString="";
        int count=1; 
        for(Student sd : resultList){
        
            HString=HString+ "<tr><td>"+count+++"</td><td align=right>"+sd.getFirstName()+" "+" "+" "+sd.getName()+"</td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td></tr>";
         }
    }

    public static void refreshNodeTerm(String s) {
        tmp = s;
        EntityManager entityManager = Persistence.createEntityManagerFactory("stLibraryPU").createEntityManager();
        javax.persistence.Query query = entityManager.createQuery("SELECT s FROM Student s WHERE s.term = :term");
        query.setParameter("term", tmp);
        List<Student> resultList = query.getResultList();
        em.setRootContext(new stRootNode(Children.create(new StChildFactory(resultList), true)));
        int count=1;
         for(Student sd : resultList){
        
            HString=HString+ "<tr><td>"+count+++"</td><td align=right>"+sd.getFirstName()+" "+" "+" "+sd.getName()+"</td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td></tr>";
         }

    }
        public static void refreshNodeCourse(String s) {
        tmp = s;
        EntityManager entityManager = Persistence.createEntityManagerFactory("stLibraryPU").createEntityManager();
        javax.persistence.Query query = entityManager.createQuery("SELECT s FROM Student s WHERE s.course = :course");
        query.setParameter("course", tmp);
        List<Student> resultList = query.getResultList();
        em.setRootContext(new stRootNode(Children.create(new StChildFactory(resultList), true)));
        int count=1; 
        for(Student sd : resultList){
        
            HString=HString+ "<tr><td>"+count+++"</td><td align=right>"+sd.getFirstName()+" "+" "+" "+sd.getName()+"</td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td></tr>";
         }

    }

    public static void refreshNode(String s, String t) {
        tmp1 = s;
        tmp2 = t;
        EntityManager entityManager = Persistence.createEntityManagerFactory("stLibraryPU").createEntityManager();
        javax.persistence.Query query = entityManager.createQuery("SELECT s FROM Student s WHERE s.course = :course AND s.term = :term");
        query.setParameter("course", tmp1);
        query.setParameter("term", tmp2);
        
        
        List<Student> resultList = query.getResultList();
        em.setRootContext(new stRootNode(Children.create(new StChildFactory(resultList), true)));

                int count=1;

     for(Student sd : resultList){
           HString=HString+ "<tr><td>"+count+++"</td><td align=right>"+sd.getFirstName()+" "+" "+" "+sd.getName()+"</td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td><td><font color=#FFFFFF>-</font></td></tr>";
        }

    }
    	public void HTMLGenerator(String s){
	String HStringL=s;
            String addr="D://report/1";
	try{
	//FileWriter fw=new FileWriter(addr+".html");
        OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(addr+".html"),"UTF-8");
        
        BufferedWriter br=new BufferedWriter(out);
	PrintWriter pw=new PrintWriter(br);
	pw.println("<html>");
	pw.println("<head>");
        pw.println("</head>");
	pw.println("<body>");
        pw.println("<center><table border=0 width=\"700\" height=\"20\">");
        pw.println("<tr>");
        
        pw.println("<td rowspan=\"2\" colspan=\"2\">Course . . . . .</td>");
        pw.println("<td colspan=\"7\"><h4><center>KALAM ENGLISH INSTITUTE</center></h4></td>");
        pw.println("<td rowspan=\"2\" colspan=\"6\">Instuctor . . . . .</td>");
        pw.println("</tr>");
        pw.println("<tr >");
        pw.println("<td colspan=\"7\"><h5><center>Students' Record</center></h5></td>");
        pw.println("</tr>");
        pw.println("<tr>");
        pw.println("<td colspan=\"2\">Days & Hours .  .  .  .</td>");
        pw.println("<td colspan=\"7\"><h5><center>Term</center></h5></td>");
        pw.println("<td colspan=\"6\">Room No.: .  .  .  .</td>");
        pw.println("</tr>");
        pw.println("<tr><table border=1 bordercolor=black>");
        pw.println("<tr>");
        
        pw.println("<td rowspan=\"2\">No.</td>");
        pw.println("<td rowspan=\"2\" width=\"150\"><center>NAME</center></td>");
        pw.println("<td rowspan=\"2\" height=\"10\" style=\"layout-flow: vertical-ideographic\"><center>Quiz 1</center></td>");
        pw.println("<td rowspan=\"2\" height=\"10\" style=\"layout-flow: vertical-ideographic\"><center>Mid-Term Exam</center></td>");
        pw.println("<td rowspan=\"2\" height=\"10\" style=\"layout-flow: vertical-ideographic\"><center>Quiz 2</center></td>");
        pw.println("<td height=\"30\" colspan=\"2\"><center>Final Exam</center></td>");
        pw.println("<td rowspan=\"2\" height=\"10\" style=\"layout-flow: vertical-ideographic\"><center>Class Participatin 10%</center></td>");
        pw.println("<td rowspan=\"2\" height=\"10\" style=\"layout-flow: vertical-ideographic\"><center>Final Score</center></td>");
        pw.println("<td rowspan=\"2\" height=\"5\" style=\"layout-flow: vertical-ideographic\"><center>Absences</center></td>");
        pw.println("<td height=\"5\" colspan=\"5\"><center>Teacher's Impression</center></td>");
        pw.println("</tr>");
        pw.println("<tr>");
        pw.println("<td height=\"5\" style=\"layout-flow: vertical-ideographic\"><center>Written 80%</center></td>");
        pw.println("<td height=\"5\" style=\"layout-flow: vertical-ideographic\"><center> Oral &nbsp;  10%</center></td>");
        pw.println("<td height=\"5\" style=\"layout-flow: vertical-ideographic\"><center>Excellent</center></td>");
        pw.println("<td height=\"5\" style=\"layout-flow: vertical-ideographic\"><center>Very Good</center></td>");
        pw.println("<td height=\"5\" style=\"layout-flow: vertical-ideographic\"><center>Good</center></td>");
        pw.println("<td height=\"5\" style=\"layout-flow: vertical-ideographic\"><center>Fair</center></td>");
        pw.println("<td height=\"5\" style=\"layout-flow: vertical-ideographic\"><center>Weak</center></td>");
        pw.println("</tr>");
        pw.println("</tr>");
        
        
pw.println(HStringL);
        
        
        pw.println("</table>");
        pw.println("</table></center>");

               

	pw.println("</body>");
	
	pw.println("</html>");
	pw.flush();
	out.close();
	}
	catch(IOException ex){}

	}
       
	

}
